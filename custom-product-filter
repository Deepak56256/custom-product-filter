{%- schema -%}
{
  "name": "AJAX Collection Grid",
  "class": "ajax-collection-grid",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Main Title",
      "default": "Our Collections"
    },
    {
      "type": "range",
      "id": "columns",
      "label": "Products per row",
      "min": 2,
      "max": 5,
      "step": 1,
      "default": 4
    },
    {
      "type": "header",
      "content": "Sidebar Settings"
    },
    {
      "type": "text",
      "id": "sidebar_title",
      "label": "Sidebar Title",
      "default": "Categories"
    },
    {
      "type": "checkbox",
      "id": "show_all_link",
      "label": "Show 'All Products' link",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_counts",
      "label": "Show product counts",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "collection",
      "name": "Collection",
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label": "Select Collection"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "AJAX Collection Grid",
      "category": "Collections"
    }
  ]
}
{%- endschema -%}

{%- style -%}
  .filter-group.filter-group-title {
    display: none;
}
.collection-page-container {
  display: flex;
  gap: 30px;
  margin: 30px 0;
}

.collection-sidebar {
  width: 182px;
  flex-shrink: 0;
  position: sticky;
  top: 20px;
  align-self: flex-start;
}

.sidebar-title {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1rem;
  padding-bottom: 0.5rem;
  border-bottom: 1px solid #e1e1e1;
}

.collection-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.collection-item {
  margin-bottom: 0.5rem;
}

.collection-link {
  display: flex;
  align-items: center;
  padding: 0.75rem 1rem;
  color: #333;
  text-decoration: none;
  border-radius: 6px;
  transition: all 0.2s ease;
  cursor: pointer;
}

.collection-link:hover {
  background-color: #f5f5f5;
}

.collection-link.active {
  background-color: #f0f0f0;
  font-weight: 600;
}

.collection-count {
  margin-left: auto;
  font-size: 0.85rem;
  color: #666;
  background: #f0f0f0;
  padding: 0.25rem 0.5rem;
  border-radius: 10px;
}

.collection-main {
  flex-grow: 1;
}

/* Filter Bar Styles */
.filter-bar {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-bottom: 20px;
  padding: 15px 0;
  border-bottom: 1px solid #eee;
}

.filter-group {
  position: relative;
}

.filter-toggle {
  display: flex;
  align-items: center;
  gap: 5px;
  padding: 8px 15px;
  background: #f5f5f5;
  border-radius: 20px;
  cursor: pointer;
  font-size: 14px;
  white-space: nowrap;
}

.filter-toggle.active {
  background: #333;
  color: white;
}

.filter-dropdown {
  position: absolute;
  top: 100%;
  left: 0;
  background: white;
  border: 1px solid #eee;
  border-radius: 8px;
  padding: 15px;
  overflow-y: auto;
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  z-index: 100;
  display: none;
  margin-top: 5px;
}

.filter-group.active .filter-dropdown {
  display: block;
}

.filter-option {
  display: flex;
  align-items: center;
  padding: 8px 0;
  cursor: pointer;
}

.filter-option input {
  margin-right: 10px;
}

.filter-count {
  margin-left: 5px;
  color: #666;
  font-size: 0.85em;
}

.active-filters {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin: 15px 0;
}

.active-filter {
  display: flex;
  align-items: center;
  padding: 5px 12px;
  background: #f5f5f5;
  border-radius: 20px;
  font-size: 14px;
}

.active-filter-remove {
  margin-left: 8px;
  cursor: pointer;
}

.filter-reset {
  margin-left: auto;
  padding: 8px 15px;
  background: #f5f5f5;
  border-radius: 20px;
  cursor: pointer;
  font-size: 14px;
  white-space: nowrap;
}

.filter-reset:hover {
  background: #eee;
}

/* Product Grid Styles */
.product-grid {
  display: grid;
  grid-template-columns: repeat({{ section.settings.columns }}, 1fr);
  gap: 20px;
  margin-bottom: 2rem;
}

.product-card {
  position: relative;
  border: 1px solid #eee;
  padding: 15px;
  transition: all 0.3s ease;
}

.product-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.product-image {
  margin-bottom: 10px;
  overflow: hidden;
}

.product-image img {
  width: 100%;
  height: auto;
  transition: transform 0.3s ease;
}

.product-card:hover .product-image img {
  transform: scale(1.05);
}

.product-title {
  margin: 0 0 5px;
  font-size: 1rem;
}

.product-price {
  font-weight: bold;
  margin: 0;
}

.sale-badge {
  position: absolute;
  top: 10px;
  right: 10px;
  background: #ff4136;
  color: white;
  padding: 0.25rem 0.5rem;
  font-size: 0.75rem;
  border-radius: 3px;
}

.no-products {
  grid-column: 1 / -1;
  text-align: center;
  padding: 2rem;
  color: #666;
}

.pagination {
  display: flex;
  justify-content: center;
  margin-top: 2rem;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.pagination a,
.pagination span {
  padding: 0.5rem 1rem;
  border: 1px solid #ddd;
  text-decoration: none;
  color: #333;
  cursor: pointer;
}

.pagination .current {
  background: #333;
  color: white;
  border-color: #333;
}

.pagination a:hover {
  background: #f5f5f5;
}

.loading-overlay {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255,255,255,0.7);
  z-index: 999;
  justify-content: center;
  align-items: center;
}

.loading-spinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #3498db;
  
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
}
.filter-option.selected {
    /* background-color: #f5f5f5; */
    background-color: #333!important;
    color: white!important;
}




  
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@media (max-width: 768px) {
  .collection-page-container {
    flex-direction: column;
  }
  
  .collection-sidebar {
    width: 100%;
    position: static;
    margin-bottom: 1.5rem;
  }
  
  .product-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .filter-bar {
    gap: 8px;
  }
  
  .filter-toggle, .filter-reset {
    padding: 6px 12px;
    font-size: 13px;
  }
}

@media (max-width: 480px) {
  .product-grid {
    grid-template-columns: 1fr;
  }
  
  .filter-bar {
    gap: 6px;
  }
  
  .filter-toggle, .filter-reset {
    padding: 5px 10px;
    font-size: 12px;
  }
}
  .filter-bar {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 20px;
    padding: 15px 0;
    border-bottom: 1px solid #eee;
    position: relative;
}
  .filter-group {
    position: unset!important;
}
  .filter-group.active .filter-dropdown {
    display: block;
    width: 100%!important;
}
  /* Add these styles to your existing CSS */
.filter-option input[type="checkbox"] {
  display: none !important;
}

.filter-group:hover .filter-dropdown {
  display: block !important;
}

.filter-dropdown {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  background: white;
  border: 1px solid #eee;
  border-radius: 8px;
  padding: 15px;
  overflow-y: auto;
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  z-index: 100;
  margin-top: 5px;
}

.filter-dropdown-inner {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 10px;
}

.filter-option {
  padding: 8px 12px;
  border: 1px solid #eee;
  border-radius: 4px;
  text-align: center;
  cursor: pointer;
  transition: all 0.2s ease;
}

.filter-option:hover {
  background-color: #f5f5f5;
}

.filter-option.selected {
  background-color: #333;
  color: white;
  border-color: #333;
}

.filter-group {
  position: relative;
  display: inline-block;
}

.filter-toggle {
  display: flex;
  align-items: center;
  gap: 5px;
  padding: 8px 15px;
  background: #f5f5f5;
  border-radius: 20px;
  cursor: pointer;
  font-size: 14px;
  white-space: nowrap;
}

.filter-toggle.active {
  background: #333;
  color: white;
}
  /* Filter Styles */
.filter-bar {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-bottom: 20px;
  padding: 15px 0;
  border-bottom: 1px solid #eee;
}

.filter-group {
  position: relative;
  display: inline-block;
}

.filter-toggle {
  display: flex;
  align-items: center;
  gap: 5px;
  padding: 8px 15px;
  background: #f5f5f5;
  border-radius: 20px;
  cursor: pointer;
  font-size: 14px;
  white-space: nowrap;
}

.filter-toggle.active {
  background: #333;
  color: white;
}

.filter-dropdown {
  position: absolute;
  top: 70%;
  left: 0;
  background: white;
  border: 1px solid #eee;
  border-radius: 8px;
  padding: 15px;
  overflow-y: auto;
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  z-index: 100;
  display: none;
  margin-top: 5px;
}

.filter-group:hover .filter-dropdown {
  display: block;
}

.filter-dropdown-inner {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 10px;
}

.filter-option {
  padding: 8px 12px;
  border: 1px solid #eee;
  border-radius: 4px;
  text-align: center;
  cursor: pointer;
  transition: all 0.2s ease;
}

.filter-option:hover {
  background-color: #f5f5f5;
}

.filter-option.selected {
  background-color: #333;
  color: white;
  border-color: #333;
}

.filter-option input[type="checkbox"] {
  display: none !important;
}

/* Color Swatches */
.color-swatch {
  display: inline-block;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  border: 1px solid #e1e1e1;
  cursor: pointer;
  position: relative;
  margin-right: 8px;
  vertical-align: middle;
}

.color-checkmark {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
  font-size: 14px;
  font-weight: bold;
  display: none;
}

.filter-option.selected .color-checkmark {
  display: block;
}

/* Active Filters */
.active-filters {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin: 15px 0;
}

.active-filter {
  display: flex;
  align-items: center;
  padding: 5px 12px;
  background: #f5f5f5;
  border-radius: 20px;
  font-size: 14px;
}

.active-filter-remove {
  margin-left: 8px;
  cursor: pointer;
}

.filter-reset {
  margin-left: auto;
  padding: 8px 15px;
  background: #f5f5f5;
  border-radius: 20px;
  cursor: pointer;
  font-size: 14px;
  white-space: nowrap;
}

.filter-reset:hover {
  background: #eee;
}
  .filter-group:hover .filter-dropdown {
    display: block !important;
    width: 100%;
}
  .filter-option {
    display: flex;
    align-items: center;
    padding: 8px 0;
    cursor: pointer;
    justify-content: center;
}
  .filter-option {
    padding: 8px 12px;
    border: 1px solid #132C6A;
    border-radius: 4px;
    text-align: center;
    cursor: pointer;
    transition: all 0.2s ease;
}
  /* Color Swatch Styles */
.color-option-container {
  display: flex;
  align-items: center;
  gap: 8px;
}

.color-swatch {
  display: inline-block;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  border: 1px solid #e1e1e1;
  cursor: pointer;
  position: relative;
  flex-shrink: 0;
}

.color-checkmark {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
  font-size: 14px;
  font-weight: bold;
  display: none;
}

.color-name {
  font-size: 0.9em;
  white-space: nowrap;
}

.filter-option.selected .color-checkmark {
  display: block;
}

.filter-option.selected {
  background-color: #f5f5f5;
}

/* Filter Group Specific Styles */
.filter-group-color .filter-dropdown-inner {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 10px;
}

.filter-group-color .filter-option {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 10px;
  text-align: center;
}

.filter-group-color .color-option-container {
  flex-direction: column;
  gap: 5px;
}

.filter-group-color .color-name {
  font-size: 0.8em;
  margin-top: 4px;
}
  .filter-dropdown {
    position: absolute;
    top: 70%!important;
    left: 0;
    background: white;
    border: 1px solid #eee;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    z-index: 100;
    display: none;
    margin-top: 5px;
}
.filter-toggle span {
    display: flex;
    gap: 5px;
    align-items: center;
}
img.dfdccs {
    width: 14px;
}
.filter-toggle {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 8px 15px;
    background: #f5f5f500!important;
    border-radius: 20px;
    cursor: pointer;
    font-size: 14px;
    white-space: nowrap;
}
  .filter-dropdown {
    padding: 31px!important;
    padding-bottom: 20px!important;
}
  .filter-done-btn {
    background-color: #000!important;
    color: white;
    padding: 8px 87px!important;
}
  .filter-dropdown-footer {
    margin-top: 31px;
    border: none;
    padding: 0;
}
  .filter-dropdown-footer {
    display: flex;
     justify-content: unset!important; 
    padding: 10px;
    border-top: 0px solid #eee!important;
    gap: 13px;
}
  .filter-clear-btn {
    background-color: #e5e5e500!important; 
    color: #000!important; 
    font-weight: 800;
    text-decoration: underline;
}
  .filter-group-color .filter-dropdown-inner {
    display: grid;
    grid-template-columns: repeat(5, 1fr)!important;
    gap: 10px;
}
  .filter-group-color .color-option-container {
    flex-direction: unset!important;
    gap: 5px;
}
  .filter-group-color .filter-option {
    display: flex;
    flex-direction: column;
    align-items: flex-start!important;
    padding: 10px;
    text-align: center!important;
    border: none!important;
}
  .filter-group-price .filter-dropdown-inner {
    display: grid;
    grid-template-columns: repeat(4, 1fr)!important;
    gap: 5px;
    overflow-y: auto;
    padding: 10px;
}
  .collection-sidebar h1.collection-title {
    font-size: 26px;
    border-bottom: 1px solid #5e5b5b26;
    padding-bottom: 10px;
    margin-bottom: 4px;
}
  .collection-link {
    display: flex;
    align-items: center;
    padding: 0;
    color: #333;
    text-decoration: none;
    border-radius: 6px;
    transition: all 0.2s ease;
    cursor: pointer;
}
  .collection-item span.collection-count {
    display: none;
}
  .collection-link.active {
    background-color: #f0f0f000;
    font-weight: 600;
    color: #000!important;
}
  .collection-sidebar h1.collection-title {
    font-size: 26px;
    border-bottom: 1px solid #5e5b5b26;
    padding-bottom: 10px;
    margin-bottom: 4px;
    margin-top: 23px;
    margin-bottom: 25px;
}
  .collection-item {
    margin-bottom: 3px;
}
  /* div#ClearAllFilters {
    display: none;
} */
  .filter-toggle.active {
    color: #000000!important;
}
  .filter-option.selected {
    background-color: #f5f5f5;
    color: black;
}
 .collection-sidebar h1.collection-title {
    font-size: 20px!important;
    border-bottom: 1px solid #5e5b5b26;
    padding-bottom: 23px!important;
    margin-bottom: 4px;
    margin-top: 18px!important;
    margin-bottom: 27px!important;
}
  .collection-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding-bottom: 15px;
  border-bottom: 1px solid #eee;
}

.collection-count {
  font-size: 16px;
  font-weight: 500;
}

.collection-sort {
  display: flex;
  gap: 15px;
}

.sort-select,
.products-per-page-select {
  padding: 8px 15px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

@media (max-width: 768px) {
  .collection-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 15px;
  }
  
  .collection-sort {
    width: 100%;
    flex-direction: column;
  }
  
  .sort-select,
  .products-per-page-select {
    width: 100%;
  }
}

  .product-card {
  position: relative;
  text-align: center;
}

.product-image-wrapper {
  position: relative;
  overflow: hidden;
}

.quick-view-wrapper {
  position: absolute;
  bottom: 0;
  width: 100%;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
  text-align: center;
}

.product-card:hover .quick-view-wrapper {
  opacity: 1;
  visibility: visible;
}

.quick-view-btn {
  background-color: black;
  color: white;
  border: none;
  padding: 10px 15px;
  margin: 10px 0;
  cursor: pointer;
  font-size: 14px;
  transition: background 0.3s;
}

.quick-view-btn:hover {
  background-color: #333;
}

.product-price {
  margin-top: 10px;
}

.compare-price {
  text-decoration: line-through;
  color: #999;
  margin-left: 8px;
}

.sale-badge {
  background: #e00;
  color: #fff;
  padding: 2px 6px;
  font-size: 12px;
  margin-left: 5px;
  border-radius: 3px;
}.product-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(255,255,255,0.6);
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
}

.product-card {
  position: relative;
  cursor: pointer;
}

.product-image-container:hover .product-overlay {
  opacity: 1;
  pointer-events: auto;
}

.quick-view-btn {
    background: black;
    color: white;
    border: none;
    padding: 10px 56px;
    cursor: pointer;
    font-size: 14px;
}
.collection-main .product-card {
    position: relative;
    cursor: pointer;
    padding: 0;
}
.collection-main .product-card {
    position: relative;
    cursor: pointer;
    padding: 0;
    border: none!important;
}
 .collection-main .sale-badge {
    background: #132C6A;
    color: #fff;
    padding: 2px 6px;
    font-size: 12px;
    margin-left: 5px;
    border-radius: 3px;
}
  .collection-main .product-card:hover {
    transform: translateY(-5px)!important;
     box-shadow: none!important; 
}
  .filter-toggle {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 8px 2px!important;

}
.filter-option.selected .color-swatch {
    display: inline-block;
    /* width: 31px; */
    /* height: 31px; */
    border-radius: 50%;
    border: 1px solid #000000!important;
    cursor: pointer;
    position: relative;
    flex-shrink: 0;
    padding: 17px!important;
}
.color-swatch {
    display: inline-block;
    /* width: 31px; */
    /* height: 31px; */
    border-radius: 50%;
    cursor: pointer;
    position: relative;
    flex-shrink: 0;
    padding: 17px!important;
}
.filter-group-color .filter-option.selected {
    /* background-color: #f5f5f5; */
    background-color: #ffffff !important;
    color: #000000 !important;
}
span.color-checkmark {
    display: none!important;
}

.filter-dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    background: white;
    /* border: 1px solid #eee; */
    border-radius: 8px;
    /* box-shadow: 0 5px 15px rgba(0,0,0,0.1); */
    z-index: 100;
    display: none;
    margin-top: 5px;
    box-shadow: 0 0 10px 0 rgba(0, 0, 0, .1)!important;
      border: .0714285714rem solid #e4e4e4!important;
    border-radius: 0!important;
}



  
{%- endstyle -%}

{% assign current_collection = collection | default: collections.all %}
{% paginate current_collection.products by 20000 %}

<div class="collection-page-container wrapper--full" data-section-id="{{ section.id }}">
  
  <!-- Sidebar Navigation -->
<div class="collection-sidebar">
  <h1 class="collection-title kdjfjd mobile-toggle">{{ current_collection.title | default: 'All Products' }}</h1>
  <ul class="collection-list mobile-hidden">
    {% if section.settings.show_all_link %}
      <li class="collection-item">
        <div class="collection-link {% if current_collection.handle == 'all' %}active{% endif %}" 
             data-collection-handle="all">
          All Products
          {% if section.settings.show_counts %}
            <span class="collection-count">{{ collections.all.products_count }}</span>
          {% endif %}
        </div>
      </li>
    {% endif %}
    
    {% for block in section.blocks %}
      {% assign col = collections[block.settings.collection] %}
      {% if col %}
        <li class="collection-item" {{ block.shopify_attributes }}>
          <div class="collection-link {% if current_collection.handle == col.handle %}active{% endif %}" 
               data-collection-handle="{{ col.handle }}">
            {{ col.title }}
            {% if section.settings.show_counts %}
              <span class="collection-count">{{ col.products_count }}</span>
            {% endif %}
          </div>
        </li>
      {% endif %}
    {% endfor %}
  </ul>
</div>

  <!-- Main Product Grid -->
  <div class="collection-main">
  {% comment %}  <h1 class="collection-title">{{ current_collection.title | default: 'All Products' }}</h1>{% endcomment %}
 
 

    
   <h2 class="refine-toggle mobile-only">Refine</h2>
<div class="fsbdjsdf">
  
    <!-- Filter Bar -->
    <div class="filter-bar" id="FilterBar-{{ section.id }}">
      
      <!-- Dynamic Filters will be generated here -->



      
    </div>
  
    <div class="active-filters" id="ActiveFilters">
      <!-- Active filters will appear here -->
    </div>

  <script></script>
</div>
 <style>

   /* Hide "Refine" heading by default on desktop */
.mobile-only {
  display: none;
  cursor: pointer; /* Indicates it's clickable */
}

/* Show filters by default on desktop */
.fsbdjsdf {
  display: block;
}

/* Mobile styles */
@media (max-width: 767px) {
  /* Show "Refine" heading only on mobile */
  .mobile-only {
    display: block;
  }
  
  /* Hide filters by default on mobile */
  .fsbdjsdf {
    display: none;
  }
  
  /* Show filters when active */
  .fsbdjsdf.mobile-visible {
    display: block;
  }
  h2.refine-toggle.mobile-only {
    font-size: 15px;
    text-decoration: underline;
    text-align: end;
    margin-top: -13px;
    padding-top: 0;
}
  .filter-group {
    position: relative;
    display: inline-block;
    width: 100%;
    border: 1px solid;
    border-radius: 6px;
    padding: 4px;
    padding-inline: 10px;
}
  .filter-toggle span {
    display: flex;
    gap: 5px;
    align-items: center;
    font-size: 14px;
    font-weight: 600;
}
  .filter-toggle {
    position: relative;
}
  img.dfdccs {
    position: absolute;
    left: 96%;
}
  h2.refine-toggle.mobile-only {
    font-size: 15px;
    text-decoration: underline;
    text-align: end;
    margin-top: -13px;
    padding-top: 0;
    border-bottom: 1px solid #e9e1e1;
    padding-bottom: 18px;
    /* margin-bottom: 50px; */
}
}



   @media screen and (min-device-width: 768px) and (max-device-width: 1024px) { 
  .product-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr)!important;
    gap: 20px;
    margin-bottom: 2rem;
}
}




   
 </style>   
 <script>
   document.addEventListener('DOMContentLoaded', function() {
  const refineToggle = document.querySelector('.refine-toggle');
  const filtersContainer = document.querySelector('.fsbdjsdf');
  
  if (refineToggle && filtersContainer) {
    refineToggle.addEventListener('click', function() {
      // Toggle visibility only on mobile
      if (window.innerWidth <= 767) {
        filtersContainer.classList.toggle('mobile-visible');
      }
    });
  }
});
 </script>  


    
<div class="product-grid" id="ProductGrid-{{ section.id }}">
  {% for product in current_collection.products %}
    <div class="product-card"
         data-product-id="{{ product.id }}"
         data-vendor="{{ product.vendor | handleize }}"
         data-price="{{ product.price }}"
         data-product-type="{{ product.type | handleize }}"
         data-tags="{{ product.tags | join: ',' | handleize }}"
         {% for option in product.options_with_values %}
         data-{{ option.name | handleize }}="{{ option.values | join: ',' | handleize }}"
         {% endfor %}
         onclick="window.location.href='{{ product.url }}'">
      <div class="product-image-container">
        <div class="product-image">
          <a href="{{ product.url }}">
            <img src="{{ product.featured_image | img_url: '400x' }}"
                 alt="{{ product.title }}"
                 loading="lazy"
                 width="400"
                 height="{{ 400 | divided_by: product.featured_image.aspect_ratio | ceil }}">
          </a>
        </div>
        <div class="product-overlay">
       <a href="{{ product.url }}">    <button class="quick-view-btn"
                  data-product-handle="{{ product.handle }}"
                  onclick="event.stopPropagation();">
            Quick View
          </button> </a>
        </div>
      </div>
      <div class="product-details">
        <h3 class="product-title">{{ product.title }}</h3>
        <div class="product-price-container">
          {% if product.compare_at_price > product.price %}
            <span class="compare-price">{{ product.compare_at_price | money }}</span>
            <span class="sale-price">{{ product.price | money }}</span>
            <span class="sale-badge">Sale</span>
          {% else %}
            <span class="regular-price">{{ product.price | money }}</span>
          {% endif %}
        </div>
      </div>
    </div>
  {% else %}
    <p class="no-products">No products found in this collection</p>
  {% endfor %}
</div>






    

    {% if paginate.pages > 1 %}
      <div class="pagination">
        {% if paginate.previous %}
          <span class="pagination-link" data-page="{{ paginate.current_page | minus: 1 }}">Previous</span>
        {% endif %}
        
        {% for part in paginate.parts %}
          {% if part.is_link %}
            <span class="pagination-link" data-page="{{ part.title }}">{{ part.title }}</span>
          {% else %}
            <span class="pagination-current {% if part.title == paginate.current_page %}current{% endif %}">
              {{ part.title }}
            </span>
          {% endif %}
        {% endfor %}
        
        {% if paginate.next %}
          <span class="pagination-link" data-page="{{ paginate.current_page | plus: 1 }}">Next</span>
        {% endif %}
      </div>
    {% endif %}
  </div>
</div>

<div class="loading-overlay" id="LoadingOverlay-{{ section.id }}">
  <div class="loading-spinner"></div>
</div>

<!-- <style>
  /* Default desktop styles - always show */
  .collection-list {
    display: block;
  }

  /* Mobile styles */
  @media screen and (max-width: 767px) {
    .collection-list.mobile-hidden {
      display: none;
    }
    
    .collection-list.mobile-visible {
      display: block;
    }
    
    .collection-title.mobile-toggle {
      cursor: pointer;
      position: relative;
      padding-right: 30px;
    }
    
  .collection-title.mobile-toggle::after {
    content: '';
    position: absolute;
    right: 5px;
    top: 33%;
    width: 18px;
    height: 16px;
    transform: translateY(-50%) rotate(359deg);
    background-image: url("https://cdn.shopify.com/s/files/1/1735/6525/files/right-arrow-svgrepo-com_1.svg?v=1747114716");
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    transition: transform 0.3s ease;
}
    
   
    .collection-title.mobile-toggle.active::after {
    transform: translateY(-50%) rotate(182deg);
}
    .collection-item {
    margin-bottom: 3px;
    padding-bottom: 18px;
    border-bottom: 1px solid #80808073 !important;
    padding-top: 14px;
    font-size: 14px;
}
  }
</style>
 -->
<style>
  /* Default desktop styles - always show */
  .collection-list {
    display: block;
  }


  
  /* Mobile styles */
  @media screen and (max-width: 767px) {
    .collection-sidebar {
      position: relative;
    }
    
    .collection-list.mobile-hidden {
      display: none;
    }
    
    .collection-title.mobile-toggle {
      cursor: pointer;
      position: relative;
      padding-right: 30px;
      margin: 0;
      font-size: 18px;
      font-weight: 500;
      z-index: 1001; /* Higher than header */
    }
    
    .collection-title.mobile-toggle::after {
      content: '';
      position: absolute;
      right: 5px;
      top: 34%;
      width: 18px;
      height: 16px;
      transform: translateY(-50%) rotate(0deg);
      background-image: url("https://cdn.shopify.com/s/files/1/1735/6525/files/right-arrow-svgrepo-com_1.svg?v=1747114716");
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
      transition: transform 0.3s ease;
    }
    
   .collection-title.mobile-toggle.active {
    position: fixed;
    top: 0%;
    left: 0;
    width: 100%;
    padding: 15px 20px;
    background: white;
    z-index: 9999;
    padding-top: 39px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin-bottom: 21px!important;
    border-bottom: 1px solid;
}
    
  .collection-list.mobile-visible {
    display: block;
    position: fixed;
    top: 78px;
    left: 0;
    width: 100%;
    height: calc(100vh - 60px);
    background: white;
    z-index: 9999;
    padding: 20px;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    padding-top: 3px;
    border-top: 1px solid #8080803b;
}
    
   .collection-title.mobile-toggle.active::after {
    transform: translateY(-50%) rotate(181deg);
    right: 20px;
    top: 64%;
}
    
  .collection-item {
    padding: 8px 0;
    border-bottom: 1px solid #8b81814a;
}
    
   
    .collection-link {
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: #333;
    text-decoration: none;
    padding: 5px 0;
    font-size: 14px;
}
    .collection-count {
      color: #999;
      font-size: 14px;
    }
    
    /* Prevent body scroll when menu is open */
    body.mobile-menu-open {
      overflow: hidden;
      position: fixed;
      width: 100%;
    }

.collection-page-container.wrapper--full {
    margin-top: 0;
}

.collection-sidebar h1.collection-title {
    font-size: 18px!important;
    border-bottom: 1px solid #5e5b5b26;
    padding-bottom: 16px!important;
    margin-bottom: 4px;
    margin-top: 0px!important;
    margin-bottom: 0px!important;
    font-weight: 600;
}

/* 
.filter-dropdown {
    position: sticky!important;
    top: 16%!important;
    left: -33%!important;
    background: white;
    border: 1px solid #eee;
    border-radius: 8px;
    box-shadow: 0 5px 15px #0000009e !important;
    z-index: 9999999999999!important;
    display: none;
    margin-top: 5px!important;
    margin-inline: 20px!important;
    width: 102%!important;
    min-height: 58vh!important;
    margin-left: 1px!important;
} */
.filter-dropdown-footer {
    position: absolute;
    bottom: 3%;
}

.filter-dropdown-inner {
    display: block!important;
}
.filter-option input[type="checkbox"] {
    display: block!important;
}
.filter-dropdown-inner span {
    width: 100%;
    margin-right: -14px;
    text-align: justify;
    position: relative;
    z-index: 9999999;
}


.color-swatch {
    display: inline-block;
    width: 24px!important;
    height: 24px;
    border-radius: 50%;
    border: 1px solid #e1e1e1;
    cursor: pointer;
    position: relative;
    flex-shrink: 0;
}

    /* 
    span.color-name {
    width: 100%!important;
    margin-right: -14px!important;
    text-align: justify!important;
    position: relative!important;
    z-index: 9999999!important;
} */
    .filter-done-btn {
    background-color: #000!important;
    color: white;
    padding: 8px 26px!important;
}
    /* span.color-swatch {
    display: none;
} */
.filter-option {
    display: flex;
    align-items: center;
    padding: 8px 0;
    cursor: pointer;
    justify-content: space-between!important;
    flex-direction: row-reverse!important;
    margin-bottom: 12px!important;
    border: none!important;
}
.filter-group {
    position: relative!IMPORTANT;
    display: inline-block;
}
 /* .filter-dropdown-inner {
    display: grid;
    grid-template-columns: 1fr;
    gap: 5px;
    max-height: 48VH;
    overflow-y: auto;
    padding: 10px;
    MIN-HEIGHT: 10VH!IMPORTANT;
} */

  .filter-group-color .filter-dropdown-inner span {
    width: 100%;
    margin-right: 12px;
    text-align: justify;
    position: relative;
    z-index: 9999999;
}

.filter-group-color .filter-option input[type="checkbox"] {
    display: none!important;
}
.filter-group-color .filter-option {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    padding: 10px;
    text-align: center!important;
    border: none!important;
    justify-content: flex-end!important;
}
    
    
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const collectionTitle = document.querySelector('.collection-title.mobile-toggle');
  const collectionList = document.querySelector('.collection-list');
  const body = document.body;
  
  if (collectionTitle && collectionList) {
    collectionTitle.addEventListener('click', function(e) {
      // Only toggle on mobile
      if (window.innerWidth <= 749) {
        e.preventDefault();
        collectionList.classList.toggle('mobile-hidden');
        collectionList.classList.toggle('mobile-visible');
        this.classList.toggle('active');
        body.classList.toggle('mobile-menu-open');
      }
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', function(e) {
      if (window.innerWidth <= 749 && 
          !e.target.closest('.collection-sidebar') && 
          collectionList.classList.contains('mobile-visible')) {
        collectionList.classList.add('mobile-hidden');
        collectionList.classList.remove('mobile-visible');
        collectionTitle.classList.remove('active');
        body.classList.remove('mobile-menu-open');
      }
    });
  }
});
</script>




  <script>


    
  </script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  const sectionId = '{{ section.id }}';
  const container = document.querySelector(`[data-section-id="${sectionId}"]`);
  const loadingOverlay = document.getElementById(`LoadingOverlay-${sectionId}`);
  let activeFilters = {};
  
  // Initialize everything
  function init() {
    buildDynamicFilters();
    initCollectionLinks();
    initPaginationLinks();
    updatePriceDisplays();
  }
  
  // Format price
  function formatPrice(price) {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 0
    }).format(price / 100);
  }

  // Update price displays
  function updatePriceDisplays() {
    document.querySelectorAll('.product-price').forEach(priceElement => {
      const productCard = priceElement.closest('.product-card');
      if (productCard) {
        const price = parseInt(productCard.dataset.price);
        priceElement.textContent = formatPrice(price);
        
        const compareAtPrice = productCard.dataset.compareAtPrice;
        if (compareAtPrice && parseInt(compareAtPrice) > price) {
          priceElement.innerHTML = `
            <span class="compare-price" style="text-decoration: line-through; color: #999; margin-right: 8px;">
              ${formatPrice(parseInt(compareAtPrice))}
            </span>
            ${formatPrice(price)}
          `;
        }
      }
    });
  }

  // Build filters
  function buildDynamicFilters() {
    const products = Array.from(document.querySelectorAll('.product-card'));
    const filterBar = document.getElementById(`FilterBar-${sectionId}`);
    
    if (!filterBar || products.length === 0) return;
    
    const priceRanges = [
      {label: 'Under ₹870', value: 'under870', min: 0, max: 87000},
      {label: '₹870 - ₹1,730', value: '870-1730', min: 87000, max: 173000},
      {label: '₹1,730 - ₹3,450', value: '1730-3450', min: 173000, max: 345000},
      {label: '₹3,450 - ₹5,170', value: '3450-5170', min: 345000, max: 517000},
      {label: '₹5,170 - ₹6,890', value: '5170-6890', min: 517000, max: 689000},
      {label: '₹6,890 - ₹8,610', value: '6890-8610', min: 689000, max: 861000},
      {label: '₹8,610 - ₹17,220', value: '8610-17220', min: 861000, max: 1722000},
      {label: '₹17,220 - ₹25,830', value: '17220-25830', min: 1722000, max: 2583000},
      {label: '₹25,830 - ₹34,440', value: '25830-34440', min: 2583000, max: 3444000},
      {label: '₹34,440 - ₹43,050', value: '34440-43050', min: 3444000, max: 4305000},
      {label: '₹43,050 - ₹51,650', value: '43050-51650', min: 4305000, max: 5165000},
      {label: '₹51,650 - ₹86,090', value: '51650-86090', min: 5165000, max: 8609000},
      {label: 'Over ₹86,090', value: 'over86090', min: 8609000, max: Infinity}
    ];
    
    const filterData = {
      vendor: new Set(),
      product_type: new Set(),
      price_range: priceRanges
    };
    
    const optionFilters = {};
    
    products.forEach(product => {
      const vendor = product.dataset.vendor;
      if (vendor) filterData.vendor.add(vendor);
      
      const productType = product.dataset.productType;
      if (productType) filterData.product_type.add(productType);
      
      Object.keys(product.dataset).forEach(key => {
        if (['productId', 'vendor', 'price', 'productType', 'tags', 'compareAtPrice'].includes(key)) return;
        
        if (!optionFilters[key]) {
          optionFilters[key] = new Set();
        }
        
        const values = product.dataset[key]?.split(',') || [];
        values.forEach(val => {
          if (val) optionFilters[key].add(val);
        });
      });
    });
    
    let filterHTML = '';
    
    if (filterData.vendor.size > 0) {
      filterHTML += createFilterGroup('vendor', 'Brand', Array.from(filterData.vendor));
    }
    
    if (filterData.product_type.size > 0) {
      filterHTML += createFilterGroup('product_type', 'Product Type', Array.from(filterData.product_type));
    }
    
    filterHTML += createFilterGroup('price', 'Price', null, filterData.price_range);
    
    Object.keys(optionFilters).forEach(key => {
      if (optionFilters[key].size > 0) {
        const displayName = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        filterHTML += createFilterGroup(key, displayName, Array.from(optionFilters[key]));
      }
    });
    
    filterHTML += '<div class="filter-reset" id="ClearAllFilters">Clear All</div>';
    filterBar.innerHTML = filterHTML;
    
    // Create color swatches for color options
    document.querySelectorAll('.filter-group').forEach(group => {
      if (group.dataset.filterGroup.includes('color') || group.dataset.filterGroup.includes('colour')) {
        createColorSwatches(group);
      }
    });
    
    restoreActiveFilters();
    initFilterEvents();
    updatePriceDisplays();
  }
  
  function createColorSwatches(filterGroup) {
    const colorOptions = filterGroup.querySelectorAll('.filter-option');
    
    colorOptions.forEach(option => {
      const value = option.dataset.value;
      const input = option.querySelector('input');
      const textSpan = option.querySelector('span');
      const colorName = textSpan.textContent;
      
      // Create container for swatch and name
      const swatchContainer = document.createElement('div');
      swatchContainer.className = 'color-option-container';
      
      // Create color swatch
      const swatch = document.createElement('span');
      swatch.className = 'color-swatch';
      swatch.style.backgroundColor = getColorValue(value);
      swatch.title = colorName;
      
      // Add checkmark
      const checkmark = document.createElement('span');
      checkmark.className = 'color-checkmark';
      checkmark.innerHTML = '✓';
      swatch.appendChild(checkmark);
      
      // Create color name element
      const nameElement = document.createElement('span');
      nameElement.className = 'color-name';
      nameElement.textContent = colorName;
      
      // Build the structure
      swatchContainer.appendChild(swatch);
      swatchContainer.appendChild(nameElement);
      
      // Replace the original content
      option.innerHTML = '';
      option.appendChild(input); // Keep the hidden input
      option.appendChild(swatchContainer);
      
      // Update selected state
      if (input && input.checked) {
        option.classList.add('selected');
      }
    });
  }
  
  function getColorValue(colorName) {
    const colorMap = {
      'red': '#ff0000', 'blue': '#0000ff', 'green': '#008000',
      'yellow': '#ffff00', 'black': '#000000', 'white': '#ffffff',
      'pink': '#ffc0cb', 'purple': '#800080', 'orange': '#ffa500',
      'gray': '#808080', 'grey': '#808080', 'brown': '#a52a2a',
      'gold': '#ffd700', 'silver': '#c0c0c0', 'navy': '#000080',
      'maroon': '#800000', 'teal': '#008080', 'olive': '#808000'
    };
    
    const lowerColor = colorName.toLowerCase();
    return colorMap[lowerColor] || '#f5f5f5';
  }
  
 
function createFilterGroup(key, displayName, values, priceRanges = null) {
  // Add filter name to class
  const groupClass = `filter-group filter-group-${key.replace(/_/g, '-')}`;
  
  let options = '';
  
  if (key === 'price' && priceRanges) {
    priceRanges.forEach(range => {
      options += `
        <div class="filter-option" data-value="${range.value}">
          <input type="checkbox" value="${range.value}" data-filter="price" data-min="${range.min}" data-max="${range.max}">
          <span>${range.label}</span>
        </div>
      `;
    });
  } else if (values) {
    // Sort numerically if values are numbers
    if (values.every(v => !isNaN(v.replace(/[^0-9.]/g, '')))) {
      values.sort((a, b) => parseFloat(a) - parseFloat(b));
    } else {
      values.sort();
    }
    
    values.forEach(value => {
      const formattedValue = value.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      options += `
        <div class="filter-option" data-value="${value}">
          <input type="checkbox" value="${value}" data-filter="${key}">
          <span>${formattedValue}</span>
        </div>
      `;
    });
  }
  
 return `
  <div class="${groupClass}" data-filter-group="${key}">
    <div class="filter-toggle">
      <span>${displayName} <b>-</b> 
        <img class="dfdccs" src="https://cdn.shopify.com/s/files/1/0919/6270/4202/files/chevron-down-svgrepo-com.svg?v=1747044780">
      </span>
      <span class="filter-count">
        <img class="dfdccs" src="https://cdn.shopify.com/s/files/1/0919/6270/4202/files/chevron-down-svgrepo-com.svg?v=1747044780">
      </span>
    </div>

    <div class="filter-dropdown auto-open">
      <div class="filter-search-container">
        <img class="dkfjdsbj" src="https://cdn.shopify.com/s/files/1/1735/6525/files/search-alt-1-svgrepo-com.svg?v=1747471698"> 
        <input type="text" class="filter-search-input" placeholder="Search ${displayName}..." />
        <div class="active-filters" id="ActiveFilters"></div>
        <div class="selected-options-container" style="display: none;"></div>
      </div>
<div class="sdeasd">
  <img class="filter-close-btn" src="https://cdn.shopify.com/s/files/1/1735/6525/files/cross-circle-svgrepo-com.svg?v=1747637957">
</div>

      <div class="filter-dropdown-inner">
        ${options}
      </div>

      <div class="filter-dropdown-footer">
        <button class="filter-done-btn dfgtfdt">DONE</button>
        <button class="filter-clear-btn">CLEAR</button>
      </div>
    </div>
  </div>

  <div class="filter-overlay"></div>
`;

}




  
  function restoreActiveFilters() {
    for (const group in activeFilters) {
      activeFilters[group].forEach(value => {
        const checkbox = document.querySelector(`.filter-option input[value="${value}"][data-filter="${group}"]`);
        if (checkbox) {
          checkbox.checked = true;
          checkbox.closest('.filter-option').classList.add('selected');
        }
      });
    }
    
    updateActiveFiltersDisplay();
    updateFilterCounts();
    filterProducts();
  }


// Add this after all filter groups are created
function initSearchFunctionality() {
  document.querySelectorAll('.filter-dropdown').forEach(dropdown => {
    const searchInput = dropdown.querySelector('.filter-search-input');
    const optionsContainer = dropdown.querySelector('.filter-dropdown-inner');
    
    if (searchInput) {
      // Remove any existing listeners to prevent duplicates
      searchInput.removeEventListener('input', handleSearch);
      searchInput.addEventListener('input', handleSearch);
      
      function handleSearch() {
        const searchTerm = this.value.toLowerCase();
        const options = optionsContainer.querySelectorAll('.filter-option');
        
        options.forEach(option => {
          const text = option.textContent.toLowerCase();
          option.style.display = text.includes(searchTerm) ? 'flex' : 'none';
        });
      }
    }
  });
}

// Call this after creating all filter groups
initSearchFunctionality();


  
  function initFilterEvents() {
    // Handle filter option clicks
  // Handle filter option clicks
  document.querySelectorAll('.filter-option').forEach(option => {
    option.addEventListener('click', function() {
      const checkbox = this.querySelector('input');
      const group = checkbox.getAttribute('data-filter');
      const value = checkbox.value;
      
      checkbox.checked = !checkbox.checked;
      
      if (checkbox.checked) {
        if (!activeFilters[group]) {
          activeFilters[group] = [];
        }
        activeFilters[group].push(value);
        this.classList.add('selected');
      } else {
        activeFilters[group] = activeFilters[group].filter(v => v !== value);
        if (activeFilters[group].length === 0) {
          delete activeFilters[group];
        }
        this.classList.remove('selected');
      }
      
      updateActiveFiltersDisplay();
      filterProducts();
      updateFilterCounts();
    });
  });



// Add search functionality to filter dropdowns
document.querySelectorAll('.filter-dropdown').forEach(dropdown => {
  const searchInput = dropdown.querySelector('.filter-search-input');
  const optionsContainer = dropdown.querySelector('.filter-dropdown-inner');
  
  if (searchInput) {
    searchInput.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      const options = optionsContainer.querySelectorAll('.filter-option');
      
      options.forEach(option => {
        const text = option.textContent.toLowerCase();
        if (text.includes(searchTerm)) {
          option.style.display = 'flex';
        } else {
          option.style.display = 'none';
        }
      });
    });
  }
});









    


    
  // Done button - add to all filter groups
 document.querySelectorAll('.filter-done-btn').forEach(btn => {
  btn.addEventListener('click', function(e) {
    e.stopPropagation();
    const group = this.closest('.filter-group');
    group.classList.remove('active');
    
    // Build URL with current filters
    const url = buildFilterUrl();
    
    // Show loading overlay
    loadingOverlay.style.display = 'flex';
    
    // Make AJAX request
    fetch(url)
      .then(response => response.text())
      .then(text => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(text, 'text/html');
        const newSection = doc.querySelector(`[data-section-id="${sectionId}"]`);
        
        if (newSection) {
          // Update product grid
          const newProductGrid = newSection.querySelector('#ProductGrid-' + sectionId);
          if (newProductGrid) {
            document.getElementById('ProductGrid-' + sectionId).innerHTML = newProductGrid.innerHTML;
          }
          
          // Update URL without reload
          history.pushState({}, '', url.replace(`section_id=${sectionId}`, '').replace(/&$/, '').replace(/\?$/, ''));
          
          // Reinitialize
          buildDynamicFilters();
          initCollectionLinks();
          initPaginationLinks();
          updatePriceDisplays();
        }
      })
      .catch(error => {
        console.error('Error filtering products:', error);
      })
      .finally(() => {
        loadingOverlay.style.display = 'none';
      });
  });
});

    

// Helper function to build filter URL
function buildFilterUrl() {
  const currentUrl = new URL(window.location.href);
  const params = new URLSearchParams(currentUrl.search);
  
  // Remove existing filter params
  Array.from(params.keys()).forEach(key => {
    if (key.startsWith('filter.')) {
      params.delete(key);
    }
  });
  
  // Add current active filters
  for (const group in activeFilters) {
    activeFilters[group].forEach(value => {
      params.append(`filter.${group}`, value);
    });
  }
  
  // Add section ID for partial reload
  params.set('section_id', sectionId);
  
  return `${currentUrl.pathname}?${params.toString()}`;
}
  
  // Clear button - add to all filter groups
  document.querySelectorAll('.filter-clear-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.stopPropagation();
      const group = this.closest('.filter-group');
      const filterType = group.dataset.filterGroup;
      const checkboxes = group.querySelectorAll('input[type="checkbox"]');
      
      checkboxes.forEach(checkbox => {
        checkbox.checked = false;
      });
      
      group.querySelectorAll('.filter-option').forEach(option => {
        option.classList.remove('selected');
      });
      
      if (activeFilters[filterType]) {
        delete activeFilters[filterType];
      }
      
      updateActiveFiltersDisplay();
      filterProducts();
      updateFilterCounts();
    });
  });
    
    // Clear all filters
    const clearAllBtn = document.getElementById('ClearAllFilters');
    if (clearAllBtn) {
      clearAllBtn.addEventListener('click', function() {
        document.querySelectorAll('.filter-option input').forEach(checkbox => {
          checkbox.checked = false;
        });
        document.querySelectorAll('.filter-option').forEach(option => {
          option.classList.remove('selected');
        });
        
        activeFilters = {};
        updateActiveFiltersDisplay();
        filterProducts();
        updateFilterCounts();
      });
    }
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
      const filterGroups = document.querySelectorAll('.filter-group');
      filterGroups.forEach(group => {
        if (!group.contains(e.target)) {
          group.classList.remove('active');
          const dropdown = group.querySelector('.filter-dropdown');
          if (dropdown) {
            dropdown.style.display = '';
          }
        }
      });
    });





document.addEventListener('DOMContentLoaded', function() {
  const sortBySelect = document.getElementById('SortBy');
  const productsPerPageSelect = document.getElementById('ProductsPerPage');
  const sectionId = '{{ section.id }}';
  const loadingOverlay = document.getElementById(`LoadingOverlay-${sectionId}`);

  // Sort By functionality
  if (sortBySelect) {
    sortBySelect.addEventListener('change', function() {
      const sortValue = this.value;
      const currentUrl = new URL(window.location.href);
      
      // Remove existing sort parameter
      currentUrl.searchParams.delete('sort_by');
      
      // Add new sort parameter
      currentUrl.searchParams.set('sort_by', sortValue);
      
      loadCollection(currentUrl.toString());
    });
  }

  // Products Per Page functionality
  if (productsPerPageSelect) {
    productsPerPageSelect.addEventListener('change', function() {
      const perPageValue = this.value;
      const currentUrl = new URL(window.location.href);
      
      // Remove existing page size parameter
      currentUrl.searchParams.delete('page');
      currentUrl.searchParams.delete('limit');
      
      // Add new page size parameter
      currentUrl.searchParams.set('limit', perPageValue);
      
      loadCollection(currentUrl.toString());
    });
  }

  function loadCollection(url) {
    // Add section ID for partial page reload
    url += (url.includes('?') ? '&' : '?') + `section_id=${sectionId}`;
    
    loadingOverlay.style.display = 'flex';
    
    fetch(url)
      .then(response => response.text())
      .then(text => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(text, 'text/html');
        const newSection = doc.querySelector(`[data-section-id="${sectionId}"]`);
        
        if (newSection) {
          // Update product grid
          const newProductGrid = newSection.querySelector('#ProductGrid-' + sectionId);
          if (newProductGrid) {
            document.getElementById('ProductGrid-' + sectionId).innerHTML = newProductGrid.innerHTML;
          }
          
          // Update pagination
          const newPagination = newSection.querySelector('.pagination');
          const currentPagination = document.querySelector('.pagination');
          if (newPagination) {
            if (currentPagination) {
              currentPagination.innerHTML = newPagination.innerHTML;
            } else {
              document.querySelector('.collection-main').appendChild(newPagination.cloneNode(true));
            }
          } else if (currentPagination) {
            currentPagination.remove();
          }
          
          // Update URL without reload
          history.pushState({}, '', url.replace(`section_id=${sectionId}`, '').replace(/&$/, '').replace(/\?$/, ''));
          
          // Reinitialize
          buildDynamicFilters();
          initCollectionLinks();
          initPaginationLinks();
          updatePriceDisplays();
        }
      })
      .catch(error => {
        console.error('Error loading collection:', error);
      })
      .finally(() => {
        loadingOverlay.style.display = 'none';
      });
  }
});






    
    // Toggle dropdown on filter-toggle click
    document.querySelectorAll('.filter-toggle').forEach(toggle => {
      toggle.addEventListener('click', function(e) {
        e.stopPropagation();
        const group = this.closest('.filter-group');
        
        // Close all other dropdowns
        document.querySelectorAll('.filter-group').forEach(g => {
          if (g !== group) {
            g.classList.remove('active');
            const dropdown = g.querySelector('.filter-dropdown');
            if (dropdown) {
              dropdown.style.display = '';
            }
          }
        });
        
        // Toggle current dropdown
        group.classList.toggle('active');
        
        const dropdown = group.querySelector('.filter-dropdown');
        if (dropdown) {
          if (group.classList.contains('active')) {
            dropdown.style.display = 'block';
          } else {
            dropdown.style.display = '';
          }
        }
      });
    });
  }






  
  function updateActiveFiltersDisplay() {
  const container = document.getElementById('ActiveFilters');
  if (!container) return;

  container.innerHTML = '';

  for (const group in activeFilters) {
    activeFilters[group].forEach(value => {
      const filterElement = document.createElement('div');

      // ✅ Add data-group attribute to the .active-filter element
      filterElement.className = 'active-filter';
      filterElement.setAttribute('data-group', group);

      const displayName = value.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      const groupDisplayName = group.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());

      filterElement.innerHTML = `
        ${groupDisplayName}: ${displayName}
        <span class="active-filter-remove" data-group="${group}" data-value="${value}">×</span>
      `;

      container.appendChild(filterElement);
    });
  }


    
    container.querySelectorAll('.active-filter-remove').forEach(btn => {
      btn.addEventListener('click', function() {
        const group = this.dataset.group;
        const value = this.dataset.value;
        
        activeFilters[group] = activeFilters[group].filter(v => v !== value);
        if (activeFilters[group].length === 0) {
          delete activeFilters[group];
        }
        
        const checkbox = document.querySelector(`.filter-option input[value="${value}"][data-filter="${group}"]`);
        if (checkbox) {
          checkbox.checked = false;
          checkbox.closest('.filter-option').classList.remove('selected');
        }
        
        updateActiveFiltersDisplay();
        filterProducts();
        updateFilterCounts();
      });
    });
  }




  
  function filterProducts() {
    const productCards = document.querySelectorAll('.product-card');
    const hasFilters = Object.keys(activeFilters).length > 0;
    const productGrid = document.getElementById(`ProductGrid-${sectionId}`);
    
    if (!productGrid) return;
    
    const existingNoProducts = document.querySelector('.no-products');
    if (existingNoProducts) {
      existingNoProducts.remove();
    }
    
    let visibleCount = 0;
    
    productCards.forEach(card => {
      if (!hasFilters) {
        card.style.display = 'block';
        visibleCount++;
        return;
      }
      
      let shouldShow = true;
      
      for (const group in activeFilters) {
        const values = activeFilters[group];
        let hasMatch = false;
        
        if (group === 'price') {
          const price = parseInt(card.dataset.price);
          
          hasMatch = values.some(v => {
            const checkbox = document.querySelector(`.filter-option input[value="${v}"][data-filter="price"]`);
            if (!checkbox) return false;
            
            const min = parseInt(checkbox.dataset.min);
            const max = parseInt(checkbox.dataset.max);
            
            return price >= min && price < max;
          });
        } else {
          const attributeData = card.dataset[group];
          
          if (attributeData) {
            const attributeValues = attributeData.split(',');
            
            hasMatch = values.some(v => {
              return attributeValues.some(attrVal => attrVal.includes(v));
            });
          }
        }
        
        if (!hasMatch) {
          shouldShow = false;
          break;
        }
      }
      
      card.style.display = shouldShow ? 'block' : 'none';
      if (shouldShow) visibleCount++;
    });
    
    if (visibleCount === 0 && productCards.length > 0) {
      const noProductsMessage = document.createElement('p');
      noProductsMessage.className = 'no-products';
      noProductsMessage.textContent = 'No products match your filter criteria';
      productGrid.appendChild(noProductsMessage);
    }
  }
  
  function updateFilterCounts() {
    document.querySelectorAll('.filter-group').forEach(group => {
      const groupName = group.dataset.filterGroup;
      const countElement = group.querySelector('.filter-count');
      
      if (activeFilters[groupName]?.length > 0) {
        countElement.textContent = activeFilters[groupName].length;
        group.querySelector('.filter-toggle').classList.add('active');
      } else {
        countElement.textContent = '';
        group.querySelector('.filter-toggle').classList.remove('active');
      }
    });
  }
  
  // AJAX Collection Loading
  function initCollectionLinks() {
    container.querySelectorAll('.collection-link').forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const handle = this.getAttribute('data-collection-handle');
        
        // Update active class
        document.querySelectorAll('.collection-link').forEach(otherLink => {
          otherLink.classList.remove('active');
        });
        this.classList.add('active');
        
        loadingOverlay.style.display = 'flex';
        
        let url;
        if (handle === 'all') {
          url = `/collections/all?section_id=${sectionId}`;
        } else {
          url = `/collections/${handle}?section_id=${sectionId}`;
        }
        
        fetch(url)
          .then(response => response.text())
          .then(text => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(text, 'text/html');
            const newSection = doc.querySelector(`[data-section-id="${sectionId}"]`);
            
            if (newSection) {
              // Update product grid
              const newProductGrid = newSection.querySelector('#ProductGrid-' + sectionId);
              if (newProductGrid) {
                document.getElementById('ProductGrid-' + sectionId).innerHTML = newProductGrid.innerHTML;
              }
              
              // Update pagination
              const newPagination = newSection.querySelector('.pagination');
              const currentPagination = document.querySelector('.pagination');
              if (newPagination) {
                if (currentPagination) {
                  currentPagination.innerHTML = newPagination.innerHTML;
                } else {
                  document.querySelector('.collection-main').appendChild(newPagination.cloneNode(true));
                }
              } else if (currentPagination) {
                currentPagination.remove();
              }
              
              // Update title
              const newTitle = newSection.querySelector('.collection-title');
              if (newTitle) {
                document.querySelector('.collection-title').textContent = newTitle.textContent;
              }
              
              // Update URL without reload
              history.pushState({}, '', url.replace(`?section_id=${sectionId}`, ''));
              
              // Reinitialize
              buildDynamicFilters();
              initCollectionLinks();
              initPaginationLinks();
              updatePriceDisplays();
            }
          })
          .catch(error => {
            console.error('Error loading collection:', error);
          })
          .finally(() => {
            loadingOverlay.style.display = 'none';
          });
      });
    });
  }
  
  // AJAX Pagination
  function initPaginationLinks() {
    document.querySelectorAll('.pagination a, .pagination .pagination-link').forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        
        let url;
        if (this.tagName.toLowerCase() === 'a') {
          url = this.href;
        } else {
          const page = this.getAttribute('data-page');
          const currentUrl = window.location.pathname;
          const queryParams = new URLSearchParams(window.location.search);
          queryParams.set('page', page);
          url = `${currentUrl}?${queryParams.toString()}`;
        }
        
        url += (url.includes('?') ? '&' : '?') + `section_id=${sectionId}`;
        
        loadingOverlay.style.display = 'flex';
        
        fetch(url)
          .then(response => response.text())
          .then(text => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(text, 'text/html');
            const newSection = doc.querySelector(`[data-section-id="${sectionId}"]`);
            
            if (newSection) {
              // Update product grid
              const newProductGrid = newSection.querySelector('#ProductGrid-' + sectionId);
              if (newProductGrid) {
                document.getElementById('ProductGrid-' + sectionId).innerHTML = newProductGrid.innerHTML;
              }
              
              // Update pagination
              const newPagination = newSection.querySelector('.pagination');
              const currentPagination = document.querySelector('.pagination');
              if (newPagination) {
                if (currentPagination) {
                  currentPagination.innerHTML = newPagination.innerHTML;
                } else {
                  document.querySelector('.collection-main').appendChild(newPagination.cloneNode(true));
                }
              } else if (currentPagination) {
                currentPagination.remove();
              }
              
              // Update URL without reload
              history.pushState({}, '', url.replace(`section_id=${sectionId}`, '').replace(/&$/, '').replace(/\?$/, ''));
              
              // Reinitialize
              buildDynamicFilters();
              initCollectionLinks();
              initPaginationLinks();
              updatePriceDisplays();
              
              // Scroll to top
              window.scrollTo({
                top: container.offsetTop - 100,
                behavior: 'smooth'
              });
            }
          })
          .catch(error => {
            console.error('Error loading page:', error);
          })
          .finally(() => {
            loadingOverlay.style.display = 'none';
          });
      });
    });
  }
  
  // Handle browser back/forward
  window.addEventListener('popstate', function() {
    window.location.reload();
  });
  
  // Initialize everything
  init();
});
</script>
<script>
  const hideButton = document.getElementById('hideButton');
  const myDiv = document.getElementById('myDiv');

  hideButton.addEventListener('click', function() {
    myDiv.style.display = 'none';
  });
</script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const checkboxes = document.querySelectorAll('.filter-dropdown-inner input[type="checkbox"]');

    checkboxes.forEach(checkbox => {
      // Apply background on load if checked
      if (checkbox.checked) {
        checkbox.parentElement.classList.add('checkbox-selected');
      }

      // Listen for change
      checkbox.addEventListener('change', function () {
        if (this.checked) {
          this.parentElement.classList.add('checkbox-selected');
        } else {
          this.parentElement.classList.remove('checkbox-selected');
        }
      });
    });
  });
</script>


<style>


.filter-search-container {
  padding: 10px;
  position: sticky;
  top: 0;
  background: white;
  z-index: 1;
  border-bottom: 1px solid #eee;
}

.filter-search-input {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

.filter-search-input:focus {
  outline: none;
  border-color: #132C6A;
}
  .filter-dropdown {
  display: none;
  transition: all 0.3s ease;
}

.filter-dropdown.open {
  display: block;
}

/* Color Swatch Styles */
.color-option-container {
  display: flex;
  align-items: center;
  gap: 8px;
}

.color-swatch {
  display: inline-block;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  border: 1px solid #e1e1e1;
  cursor: pointer;
  position: relative;
  flex-shrink: 0;
}

.color-checkmark {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
  font-size: 14px;
  font-weight: bold;
  display: none;
}

.color-name {
  font-size: 0.9em;
  white-space: nowrap;
}

.filter-option.selected .color-checkmark {
  display: block;
}

.filter-option.selected {
  background-color: #f5f5f5;
}

/* Price Filter Specific Styles */
.filter-group-price .filter-dropdown {
  width: 220px;
}

.filter-group-price .filter-dropdown-inner {
  display: grid;
  grid-template-columns: 1fr;
  gap: 5px;
  max-height: 300px;
  overflow-y: auto;
  padding: 10px;
}

.filter-group-price .filter-option {
  padding: 8px 12px;
  text-align: left;
  border-radius: 4px;
  cursor: pointer;
}

.filter-group-price .filter-option:hover {
  background-color: #f5f5f5;
}

.filter-group-price .filter-option.selected {
  background-color: #333;
  color: white;
}

.filter-dropdown-footer {
  display: flex;
  justify-content: space-between;
  padding: 10px;
  border-top: 1px solid #eee;
}

.filter-done-btn, .filter-clear-btn {
  padding: 8px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.filter-done-btn {
  background-color: #333;
  color: white;
}

.filter-clear-btn {
  background-color: #f5f5f5;
  color: #333;
}

.filter-done-btn:hover {
  background-color: #555;
}

.filter-clear-btn:hover {
  background-color: #e5e5e5;
}

/* General Filter Styles */
.filter-bar {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-bottom: 20px;
  padding: 15px 0;
  border-bottom: 1px solid #eee;
}

.filter-group {
  position: relative;
  display: inline-block;
}

.filter-toggle {
  display: flex;
  align-items: center;
  gap: 5px;
  padding: 8px 15px;
  background: #f5f5f5;
  border-radius: 20px;
  cursor: pointer;
  font-size: 14px;
  white-space: nowrap;
}

.filter-toggle.active {
  background: #333;
  color: white;
}

.filter-dropdown {
  position: absolute;
  top: 100%;
  left: 0;
  background: white;
  border: 1px solid #eee;
  border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  z-index: 100;
  display: none;
  margin-top: 5px;
}

.filter-group:hover .filter-dropdown {
  display: block;
}

.filter-count {
  margin-left: 5px;
  font-size: 0.85em;
}

/* Active Filters */
.active-filters {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin: 15px 0;
}

.active-filter {
  display: flex;
  align-items: center;
  padding: 5px 12px;
  background: #f5f5f5;
  border-radius: 20px;
  font-size: 14px;
}

.active-filter-remove {
  margin-left: 8px;
  cursor: pointer;
}

.filter-reset {
  margin-left: auto;
  padding: 8px 15px;
  background: #f5f5f5;
  border-radius: 20px;
  cursor: pointer;
  font-size: 14px;
  white-space: nowrap;
}

.filter-reset:hover {
  background: #eee;
}

/* Loading Overlay */
.loading-overlay {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255,255,255,0.7);
  z-index: 999;
  justify-content: center;
  align-items: center;
}

.loading-spinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #3498db;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Responsive Styles */
@media (max-width: 767px) {
  .filter-bar {
    gap: 8px;
  }
  
  .filter-toggle, .filter-reset {
    padding: 6px 12px;
    font-size: 13px;
  }
  
  .filter-group-price .filter-dropdown {
    width: 280px;
  }
}


  .filter-option {
    padding: 8px 31px!important;
    border: 1px solid #132C6A;
    border-radius: 4px;
    text-align: center;
    cursor: pointer;
    transition: all 0.2s ease;
}

  .filter-dropdown-inner {
    display: flex!important;
    flex-wrap: wrap;
}

  .filter-group-price .filter-dropdown-inner {
    gap: 8px!important;
    padding: 10px!important;
    row-gap: 10px;
} 

  
@media (max-width: 767px) {
  .filter-bar {
    gap: 6px;
  }
  
  .filter-toggle, .filter-reset {
    padding: 5px 10px;
    font-size: 12px;
  }

  /* .filter-group-price .filter-dropdown-inner {
    display: grid!important;
    grid-template-columns: repeat(1, 1fr)!important!important;
    gap: 5px!important;
    max-height: 300px!important;
    overflow-y: auto;
    padding: 10px;
}
  .filter-dropdown {
    padding: 31px!important;
    padding-bottom: 20px!important;
    padding-inline: 8px!important;
}
  .filter-group-color .filter-dropdown-inner {
    display: grid!important;
    grid-template-columns: repeat(1, 1fr)!important;
    gap: 10px!important;
} */
}


/* .filter-dropdown {
  max-height: 0;
  overflow: hidden;
  transition: max-height 3s ease;
  width: 100%;
  display: block;
}

.filter-group:hover .filter-dropdown {
  max-height: 500px; /* Change this to match your dropdown content height */
}
 */
 .filter-bar .filter-group-vendor  .filter-option input[type="checkbox"] {
    display: block!important;
}

.filter-bar .filter-group-vendor .filter-dropdown-inner {
    display: grid!important;
    grid-template-columns: repeat(3, 1fr)!important;
    gap: 10px;
}
 

 
 .filter-bar .filter-group-vendor  .filter-option input[type="checkbox"] {
    display: block!important;
   
}
 .filter-bar .filter-group-vendor .filter-option {
    justify-content: flex-start!important;
    align-items: baseline;
} 
   .filter-bar .filter-group-vendor .filter-option {
    padding: 8px 0px!important;
    border: 1px solid #132c6a00!important;
    border-radius: 4px;
    text-align: center;
    cursor: pointer;
    transition: all 0.2s ease;
}
  .filter-bar .filter-group-vendor .filter-option.selected {
    /* background-color: #f5f5f5; */
    background-color: #33333300 !important;
    color: #132C6A!important;
}
  .filter-option:hover {
    background-color: #f5f5f500!important;
}
  .filter-bar .filter-group-vendor .filter-option {
    width: 34%!important;
}
 .filter-bar .filter-group-vendor .filter-option {
    width: 34%!important;
} 

  .filter-bar .filter-group-vendor .filter-option {
    justify-content: flex-start!important;
}
  .filter-bar .filter-group-vendor .filter-option input {
    margin-right: 0px!important;
}
  .filter-bar .filter-group-vendor .filter-dropdown-inner span {
    margin-left: -13px;
    padding-left: 20px;
}

/* .filter-toggle:hover {
    padding-bottom: 133px!important;
}
 */

  /* Custom Checkbox Styling */

.filter-option input[type="checkbox"] {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  height: 0;
  width: 0;
}

/* Create a custom checkbox */
.filter-option input[type="checkbox"] + span {
  position: relative;
  padding-left: 0px;
  cursor: pointer;
  display: inline-block;
  line-height: 20px;
  font-size: 14px;
}

.filter-option input[type="checkbox"] + span:before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  width: 18px;
  height: 18px;
  border: 1px solid #ccc;
  background-color: white;
  border-radius: 2px;
  transition: all 0.2s ease;
     display:none;
}

/* Create the checkmark */
.filter-option input[type="checkbox"]:checked + span:after {
  content: '';
  position: absolute;
  left: 6px;
  top: 3px;
  width: 6px;
  height: 10px;
  border: solid #000;
  border-width: 0 2px 2px 0;
  transform: rotate(45deg);
}

/* Styling for selected option */
.filter-option.selected {
  background-color: #f0f0f0;
}

.filter-bar .filter-group-vendor .filter-option input[type="checkbox"] + span:before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  width: 18px;
  height: 18px;
  border: 1px solid #ccc;
  background-color: white;
  border-radius: 2px;
  transition: all 0.2s ease;
     display:block;
}

  .filter-bar .filter-group-vendor .filter-option input[type="checkbox"] + span {
    position: relative;
    padding-left: 30px!important;
    cursor: pointer;
    display: inline-block;
    line-height: 20px;
    font-size: 14px;
}



  selected-options-container {
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
  margin-top: 10px;
  margin-bottom: 5px;
  padding: 5px 0;
  border-bottom: 1px solid #eee;
  max-height: 100px;
  overflow-y: auto;
}

.selected-option-pill {
  display: inline-flex;
  align-items: center;
  background-color: #f1f1f1;
  border-radius: 16px;
  padding: 4px 10px;
  font-size: 12px;
  color: #333;
  max-width: 100%;
}

.pill-text {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100px;
}

.pill-remove {
  margin-left: 5px;
  font-size: 14px;
  line-height: 1;
  color: #777;
  cursor: pointer;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 16px;
  height: 16px;
}

.pill-remove:hover {
  color: #333;
  background-color: #ddd;
  border-radius: 50%;
}

/* Improve filter search container styling */
.filter-search-container {
  padding: 10px;
  border-bottom: 1px solid #eee;
  position: sticky;
  top: 0;
  background-color: #fff;
  z-index: 1;
}

.filter-search-input {
  width: 100%;
  padding: 8px 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

/* Improve filter option styling */
.filter-option {
  display: flex;
  align-items: center;
  padding: 8px 10px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.filter-option:hover {
  background-color: #f5f5f5;
}

.filter-option.selected {
  background-color: #f0f7ff;
}

/* Make room for pills when filter dropdown is active */
.filter-dropdown.auto-open {
  max-height: auto!important;
  overflow-y: auto;
}

/* .filter-dropdown-inner {
  max-height: 250px;
  overflow-y: auto;
} */
.filter-dropdown {
    top: 68%!important;
}
/* Responsive adjustments */
@media (max-width: 767px) {
  .selected-option-pill {
    font-size: 11px;
    padding: 3px 8px;
  }
  
  .pill-text {
    max-width: 80px;
  }
}

  .active-filter {
  display: none;
}

.active-filter[data-group="vendor"] {
  display: block;
}

  .filter-search-container {
    display: none;
}
  .filter-group-vendor .filter-search-container {
    display: block;
}
  .filter-bar .filter-group-vendor .filter-option {
    width: 43%!important;
    margin-left: 20px;
}
 img.dkfjdsbj {
    width: 20px;
    margin-bottom: -33px;
    margin-left: 13px;
}
  input.filter-search-input {
    height: 47px;
    border-color: #132c6a;
}
  input.filter-search-input {
    height: 47px;
    border-color: #132c6a;
    padding-left: 46px;
}
 .filter-search-container {
    padding-top: 44px;
} 
  .filter-bar .filter-group-vendor .filter-dropdown.auto-open {
    padding-top: 0!important;
}
 .filter-bar .filter-group-vendor .filter-dropdown.auto-open {
    padding-top: 0!important;
    min-height: 65vh!important;
    overflow-y: clip;
}
  .filter-bar .filter-group-vendor .filter-dropdown-inner {
    max-height: 40vh!important;
    overflow-y: auto;
}
  .filter-option {
    width: 32.3%;
}
  .filter-group-price .filter-dropdown-inner {
    display: flex!important;
    flex-wrap: wrap;
}
 .filter-group-price .filter-option {
    width: auto;
}
  .filter-dropdown.auto-open {
    max-height: auto!important;
    overflow-y: auto;
}
  .filter-dropdown.auto-open {
    max-height: auto!important;
    overflow-y: auto;
}  .filter-dropdown.auto-open {
    max-height: auto!important;
    overflow-y: auto;
}  .filter-dropdown.auto-open {
    max-height: auto!important;
    overflow-y: auto;
}
  .filter-group-color .filter-option {
    width: 19%;
}
  .filter-reset {
    margin-left: 0!important;
    font-weight: 700!important;
}




.dropdown-content { 
 opacity: 0;  
visibility: hidden; 
 transition: opacity 0.4s ease, visibility 0.4s ease;
}
.dropdown:hover .dropdown-content {  opacity: 1; 
 visibility: visible;  
transition-delay: 0.2s;
}
.filter-dropdown-inner {
    height: auto!important;
    overflow-y: auto;
}


 .filter-dropdown {
    min-width:auto!important;
    max-height: auto!important;
}

.filter-toggle {
    position: relative!important;
    padding-block: 0px!important;
}

 .filter-reset {
    margin-left: auto;
    padding: 0!important;
    background: #f5f5f500!important;
    border-radius: 20px;
    cursor: pointer;
    font-size: 14px;
    white-space: nowrap;
} 

.collection-sidebar h1.collection-title {
    font-size: 20px!important;
    border-bottom: 1px solid #5e5b5b26;
    padding-bottom: 23px!important;
    margin-bottom: 4px;
    margin-top: 4px!important;
    margin-bottom: 13px!important;
}



/* Container hover triggers dropdown */
.filter-group:hover .filter-dropdown {
  display: block;
  animation: fadeSlideDown 0.4s ease forwards;
}

/* Hide initially */
.filter-dropdown {
  display: none;
  opacity: 0;
  transform: translateY(-10px); /* start slightly above */
  transition: opacity 0.4s ease, transform 0.4s ease;
}

/* Animation keyframes */
@keyframes fadeSlideDown {
  0% {
    opacity: 0;
    transform: translateY(-10px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
.filter-option:hover {
    background-color: #f5f5f500 !important;
    color: black!important;
}
.filter-option input[type="checkbox"]:checked + span:after {
   display:none;
}
  
  .filter-bar .filter-group-vendor .filter-option input[type="checkbox"]:checked + span:after {
   display:block;
}


  .filter-dropdown {
    top: 60%!important;
}


  img.filter-close-btn {
    display: none;
}
@media (max-width: 767px) {
 img.filter-close-btn {
    display: block;
}
    .filter-bar .filter-group-vendor .filter-dropdown.auto-open {
    padding-top: 0!important;
    min-height: unset!important;
    overflow-y: clip;
}
  .filter-dropdown {
    position: fixed !important;
    bottom: 0 !important; /* Start from bottom */
    left:0!important;
    top: auto !important; /* Override any top positioning */
    transform: translate(-100%, 100%) !important; /* Start fully below the viewport */
    opacity: 0 !important;
    max-height: 0 !important;
    pointer-events: none !important;
    z-index: 9999 !important;
    background: white;
    width: 90%;
    transition:
      transform 0.4s ease-out,
      opacity 0s ease-out,
      max-height 0.4s ease-out !important;
    border-radius: 12px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
  }

  .filter-group.active .filter-dropdown {
    transform: translate(0%, 0) !important; /* Move up to final position */
    opacity: 1 !important;
    max-height: 86vh !important;
    pointer-events: auto !important;
  }
  .filter-dropdown-inner {
    overflow-y: auto!important;
    padding: 10px!important;
    min-height: 86vh!important;
}
  .filter-option {
    width: 100%!important;
}
 
    .filter-bar .filter-group-vendor .filter-dropdown-inner {
    display: grid!important;
    grid-template-columns: repeat(1, 1fr)!important;
margin:0px!important;
      padding:0px!important;
}
  .filter-group-vendor .filter-search-container {
    display: none;
}
  .filter-group-price .filter-dropdown-inner {
    display: grid!important;
    grid-template-columns: repeat(1, 1fr)!important;
    gap: 5px;
    overflow-y: auto;
    padding: 10px;
}
  .filter-dropdown-inner {
    display: grid!important;
    grid-template-columns: repeat(1, 1fr)!important;
    gap: 10px;
}
  .filter-dropdown-footer {
    display: none;
}
  .filter-option input[type="checkbox"] + span:before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  width: 18px;
  height: 18px;
  border: 1px solid #ccc;
  background-color: white;
  border-radius: 2px;
  transition: all 0.2s ease;
     display:block;
    

}
  .filter-option input[type="checkbox"]:checked + span:after {
    display: block!important;
}

.filter-bar .filter-group-vendor .filter-option {
    width: 100%!important;
    margin-left: 0px!important;
}
.filter-option {
    padding: 0!important;
}
  .filter-option input[type="checkbox"] + span {
    position: relative;
    padding-left: 27px!important;
    cursor: pointer;
    display: inline-block;
    line-height: 20px;
    font-size: 14px;
}
  .sdeasd {
    display: flex;
    justify-content: end;
    background-color: #80808012;
    margin-bottom: 15px;
}
  .filter-dropdown.auto-open {
    padding: 0!important;
}
  .filter-bar .filter-group-vendor .filter-dropdown-inner {
    margin: 21px!important;
}
 .filter-dropdown-inner {
    margin: 21px!important;
}
  .filter-bar .filter-group-vendor .filter-option {
    padding: 3px 0px!important;
}
   .filter-option {
    padding: 3px 0px!important;
}
  img.filter-close-btn {
    width: 16%;
    padding-right: 15px;
    padding-top: 7px;
    padding-bottom: 8px;
}
  .filter-group-color .filter-dropdown-inner {
    display: grid;
    grid-template-columns: repeat(1, 1fr)!important;
    gap: 10px;
}
     .filter-dropdown-inner {
    display: grid!important;
    grid-template-columns: repeat(1, 1fr)!important;
    gap: 10px;
}
  /* .filter-dropdown-inner {
    display: flex!important;
  
} */
  /* .filter-dropdown-inner {
    display: flex!important;
    flex-direction: column;
    row-gap: 23px!important;
} */

  .filter-dropdown-inner {
    display: flex!important;
    flex-direction: column;
}
   .filter-option  input[type="checkbox"] + span:before {
    border-radius: 50px!important;
}
 .filter-option.filter-option.selected  input[type="checkbox"] + span:before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    width: 18px;
    height: 18px;
    border: 1px solid #ccc;
    background-color: #132c6a!important;
    border-radius: 2px;
    transition: all 0.2s ease;
    display: block;
}

  .filter-option input[type="checkbox"]:checked + span:after {
    content: '';
    position: absolute;
    left: 6px;
    top: 3px;
    width: 6px;
    height: 10px;
    border: solid #ffffff;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
    color: red!important;
    border-radius: 50px!important;
}
  div#ClearAllFilters {
    padding: 14px!important;
    border: 2px solid;
    background-color: #132c6a!important;
    color: white;
    margin-top: 10px;
    padding-block: 15px!important;
    padding-inline: 42px!important;
    border-radius: 7px;
}
  .filter-toggle b {
    color: white;
}
}

 @media (max-width: 767px) {
  body.dropdown-open {
    position: fixed;
    overflow: hidden;
    width: 100%;
    height: 100vh;
    top: 0;
    left: 0;
  }

  .filter-overlay {
    position: fixed;
    inset: 0;
    background:rgb(0 0 0 / 11%);
    z-index: 9998;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }

  .filter-group.active ~ .filter-overlay {
    opacity: 1;
    pointer-events: auto;
  }
   .filter-option.selected {
    background-color: #33333300 !important;
    color: #000 !important;
}
.filter-group {
    padding: 8px!important;
    padding-inline: 10px!important;
    margin-bottom: 6px!important;
}
   .collection-sidebar {
    margin-bottom: 0.5rem!important;
}
   .collection-sidebar h1.collection-title {
    font-size: 16px!important;
}
} 

/* */
  
/* .filter-dropdown {
    top: 41%!important;
}
.filter-toggle:hover {
    padding-bottom: 56px!important;
} */


.filter-bar {
    gap: 0px!important;
}
  .filter-toggle {
    font-size: 13px!important;
}
.filter-toggle span {
    display: flex;
    gap: 2px!important;
    align-items: center;
}  
  .filter-toggle {
    gap: 1px!important;

} 
  /* .filter-dropdown {
    top: 65%!important;
}

 @media (max-width: 767px) {
  .filter-dropdown {
    top: 5%!important;
}
 } */
</style>



  <script>
    
  </script>
  <script>
  document.addEventListener("DOMContentLoaded", function () {
  const body = document.body;

  function disableBodyScroll() {
    const scrollY = window.scrollY;
    body.dataset.scrollY = scrollY;
    body.style.position = "fixed";
    body.style.top = `-${scrollY}px`;
    body.classList.add("dropdown-open");
  }

  function enableBodyScroll() {
    const scrollY = body.dataset.scrollY || "0";
    body.style.position = "";
    body.style.top = "";
    body.classList.remove("dropdown-open");
    window.scrollTo(0, parseInt(scrollY));
  }

  document.addEventListener("click", function (e) {
    const toggle = e.target.closest(".filter-toggle");
    const doneBtn = e.target.closest(".filter-done-btn");
    const isOverlayClick = e.target.classList.contains("filter-overlay");
    const closeBtn = e.target.closest(".filter-close-btn"); // ✅ NEW

    if (toggle) {
      const group = toggle.closest(".filter-group");
      const isActive = group.classList.contains("active");

      document.querySelectorAll(".filter-group.active").forEach(g => g.classList.remove("active"));
      enableBodyScroll();

      if (!isActive) {
        group.classList.add("active");
        disableBodyScroll();
      }
    }

    if (doneBtn || isOverlayClick || closeBtn) {
      document.querySelectorAll(".filter-group.active").forEach(g => g.classList.remove("active"));
      enableBodyScroll();
    }
  });
});

</script> 


  
<script>
document.addEventListener("DOMContentLoaded", function () {
  const body = document.body;
  const overlay = document.querySelector(".filter-overlay");

  function disableBodyScroll() {
    const scrollY = window.scrollY;
    body.dataset.scrollY = scrollY;
    body.style.position = "fixed";
    body.style.top = `-${scrollY}px`;
    body.classList.add("dropdown-open");
  }

  function enableBodyScroll() {
    const scrollY = body.dataset.scrollY || "0";
    body.style.position = "";
    body.style.top = "";
    body.classList.remove("dropdown-open");
    window.scrollTo(0, parseInt(scrollY));
  }

  document.addEventListener("click", function (e) {
    const toggle = e.target.closest(".filter-toggle");
    const doneBtn = e.target.closest(".filter-done-btn");
    const isOverlayClick = e.target.classList.contains("filter-overlay");

    if (toggle) {
      const group = toggle.closest(".filter-group");
      const isActive = group.classList.contains("active");

      document.querySelectorAll(".filter-group.active").forEach(g => g.classList.remove("active"));
      enableBodyScroll();

      if (!isActive) {
        group.classList.add("active");
        disableBodyScroll();
      }
    }

    if (doneBtn || isOverlayClick) {
      document.querySelectorAll(".filter-group.active").forEach(g => g.classList.remove("active"));
      enableBodyScroll();
    }
  });
});
</script> 



{% endpaginate %} 

